def key_positions(seq, key):    
    """
    takes a sequence and a key function, and returns an array (list) 
    such that the i-th element of the array is the starting position 
    (in the sorted output of the counting sort algorithm) of objects 
    in seq whose key is i. Assume that the key function is defined for 
    all the elements of the input sequence and returns a natural number.
    """
    k = key(max(seq, key=key)) + 1
    C = [0] * k
    for a in seq:
        C[key(a)] = C[key(a)] + 1
    sums = 0
    for i in range(k):
        C[i], sums = sums, sums + C[i]
    return C
def sorted_array(seq, key, positions):
    """
    takes a sequence, a key function, and an array of positions 
    generated by key_positions from the previous question and 
    produces an array (list) containing the elements of seq sorted 
    according to the key function. The sort must be stable.
    """
    B = [0] * len(seq)
    P = key_positions(seq, key)
    for a in seq:
        B[P[key(a)]] = a
        P[key(a)] += 1
    return B

# --------test1------------------
print(sorted_array([3, 1, 2], lambda x: x, [0, 0, 1, 2]))
# -----------------------------------------------------------

# -------------test2------------------------
print(sorted_array([3, 2, 2, 1, 2], lambda x: x, [0, 0, 1, 4]))
